// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String  @unique
  email    String  @unique
  name     String?
  password String
  profilePicture String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken RefreshToken[]
  tweet Tweet[]
  mediaFile MediaFile[]
}

model RefreshToken {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    token String @unique
    userId  String @db.ObjectId
    user User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tweet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text String 

  // Author
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  replyToId String? @db.ObjectId
  replyTo Tweet? @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction )

  replies Tweet[] @relation("replies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ToDO Media Files
  mediaFiles MediaFile[]
}

model MediaFile {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  url String
  providerPublicId String

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  tweetId String? @db.ObjectId
  tweet Tweet? @relation(fields: [tweetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}